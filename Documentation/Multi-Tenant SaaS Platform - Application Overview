# Multi-Tenant SaaS Platform - Complete Application Overview

## 🎯 What This Application Is

A **full-stack multi-tenant SaaS platform** that enables organizations to manage their own AI-powered workspaces with subscription-based billing and credit consumption.

## 🏗️ Architecture Summary

### Frontend Stack
- **React 18** with TypeScript
- **Chakra UI v3** for modern component design
- **TanStack Router** for type-safe routing
- **TanStack Query** for server state management
- **React Hook Form** for form validation
- **Vite** for fast development and building

### Backend Stack
- **FastAPI** for high-performance API
- **SQLModel** for type-safe database operations
- **PostgreSQL** for reliable data storage
- **Alembic** for database migrations
- **JWT** for secure authentication
- **Cryptography** for API key encryption

## 🎪 Core Business Model

### Multi-Tenant Structure
```
Platform
├── SuperAdmin (Platform Management)
├── Tenant Organizations
│   ├── TenantAdmin (Organization Management)
│   └── Users (Limited Access)
└── Isolated Data per Tenant
```

### Revenue Model
- **Subscription Plans** with different feature tiers
- **Credit-Based Usage** for AI API consumption
- **Pay-Per-Use** billing for API calls
- **Automatic Credit Allocation** based on subscription

## ✨ Key Features

### 🔐 Authentication & Authorization
- **Role-based access control** (SuperAdmin, TenantAdmin, User)
- **JWT tokens** with tenant and role claims
- **Secure session management**
- **Password reset with email verification**

### 🏢 Tenant Management
- **Organization workspaces** with data isolation
- **Tenant admin dashboard** for user management
- **Invitation-based user onboarding**
- **Custom email configuration per tenant**

### 💳 Subscription & Billing
- **Multiple subscription plans** with feature flags
- **Real-time credit balance tracking**
- **Usage history and transaction logs**
- **Automatic plan-based credit allocation**

### 🔑 Secure API Management
- **Encrypted API key storage** (OpenAI, Anthropic, etc.)
- **Server-side API proxy** (keys never exposed to frontend)
- **Global key pool management** by SuperAdmin
- **Per-tenant key assignment**

### 🤖 AI Integration
- **OpenAI API proxy** with cost calculation
- **Real-time credit deduction** during API usage
- **Usage tracking and logging**
- **Support for multiple AI providers**

### 📧 Communication System
- **MJML email templates** for professional emails
- **Per-tenant SMTP configuration**
- **Invitation emails with JWT tokens**
- **Welcome and notification emails**

## 🎨 Frontend Architecture

### Component Structure
- **Chakra UI v3** components with modern design
- **Role-based UI rendering** based on user permissions
- **Responsive design** for mobile and desktop
- **Dark/light mode support**

### State Management
- **TanStack Query** for server state caching
- **React Context** for global state (auth, theme)
- **Local state** with React hooks
- **Form state** with React Hook Form

### Routing System
- **File-based routing** with TanStack Router
- **Protected routes** based on authentication
- **Role-based route access** (admin-only pages)
- **Tenant-scoped navigation**

## 🔧 Backend Architecture

### API Design
- **RESTful endpoints** with clear resource organization
- **OpenAPI documentation** with FastAPI
- **Request/response validation** with Pydantic
- **Error handling** with standardized responses

### Database Design
- **Shared schema** with tenant isolation via `tenant_id`
- **Foreign key relationships** for data integrity
- **Audit trails** for credit transactions
- **Migration system** with Alembic

### Security Features
- **API key encryption** before database storage
- **Role-based endpoint protection**
- **Request validation and sanitization**
- **SQL injection prevention**

## 📊 Data Flow Examples

### User Invitation Flow
1. TenantAdmin creates invitation → Frontend form
2. Backend generates JWT token → Email sent
3. User clicks link → Frontend invitation page
4. User registers → Backend creates user with tenant assignment
5. Auto-subscription → Credits allocated

### AI API Usage Flow
1. User makes request → Frontend API call
2. Backend validates permissions → Check credit balance
3. Proxy to OpenAI → Deduct credits
4. Return response → Update frontend state

## 🚀 Scalability Features

### Current Capabilities
- **Multi-tenant data isolation**
- **Horizontal scaling** with stateless design
- **Credit-based billing model**
- **Modular component architecture**

### Ready for Enhancement
- **Additional AI providers**
- **Custom billing cycles**
- **White-label branding per tenant**
- **Advanced analytics dashboards**
- **Mobile app integration**

## 🔍 Key Integrations

### External Services
- **OpenAI API** for AI capabilities
- **SMTP servers** for email delivery
- **Future payment systems** (Stripe, etc.)

### Internal Systems
- **Real-time credit balance updates**
- **Tenant-scoped data access**
- **Role-based UI components**
- **Secure API key management**