# Data Models and Relationships Map

## Core Entities Overview

### Primary Models (Tables)

#### 1. **Tenant** (Organizations)
```python
# Location: app/models.py - Tenant class
```
- **Purpose**: Represents client organizations
- **Key Fields**: name, description, is_active, created_at
- **Relationships**: 
  - One-to-Many with Users
  - One-to-Many with TenantApiKey
  - One-to-Many with CreditTransaction
  - One-to-One with EmailConfig

#### 2. **User** (Platform Users)
```python
# Location: app/models.py - User class
```
- **Purpose**: All platform users (SuperAdmin, TenantAdmin, Users)
- **Key Fields**: email, tenant_id, role, is_active, is_superuser
- **Roles**: "superadmin", "tenant_admin", "user"
- **Relationships**:
  - Many-to-One with Tenant
  - One-to-Many with Items
  - One-to-Many with UserSubscription

#### 3. **SubscriptionPlan** (Billing Plans)
```python
# Location: app/models.py - SubscriptionPlan class
```
- **Purpose**: Define subscription tiers and features
- **Key Fields**: name, price, duration_days, features[], credit_limit
- **Features**: JSON array of plan capabilities
- **Credit Limit**: Monthly credit allocation per user

#### 4. **UserSubscription** (Active Subscriptions)
```python
# Location: app/models.py - UserSubscription class
```
- **Purpose**: Track user's current subscription
- **Key Fields**: user_id, plan_id, start_date, end_date, status
- **Status**: "active", "cancelled", "expired"

### Security & API Management

#### 5. **TenantApiKey** (Per-Tenant API Keys)
```python
# Location: app/models.py - TenantApiKey class
```
- **Purpose**: Store encrypted API keys per tenant
- **Key Fields**: tenant_id, provider, encrypted_key, is_active
- **Providers**: "openai", others
- **Security**: Keys are encrypted, never exposed to frontend

#### 6. **AdminApiKey** (Global Key Pool)
```python
# Location: app/models.py - AdminApiKey class
```
- **Purpose**: SuperAdmin manages global API key pool
- **Key Fields**: provider, encrypted_key, is_active
- **Usage**: Keys consumed and assigned to tenants

### Credit & Billing System

#### 7. **CreditTransaction** (Credit Ledger)
```python
# Location: app/models.py - CreditTransaction class
```
- **Purpose**: Track all credit movements
- **Key Fields**: tenant_id, user_id, amount, transaction_type, description
- **Types**: "add", "deduct", "refund"
- **Amount**: Positive for additions, negative for deductions

### User Management

#### 8. **TenantInvitation** (User Invitations)
```python
# Location: app/models.py - TenantInvitation class
```
- **Purpose**: Manage user invitation process
- **Key Fields**: tenant_id, email, role, token, expires_at, is_used
- **Security**: JWT tokens with expiration
- **Workflow**: Create → Email → Accept → User Created

### Configuration

#### 9. **EmailConfig** (Per-Tenant Email)
```python
# Location: app/models.py - EmailConfig class
```
- **Purpose**: Tenant-specific SMTP settings
- **Key Fields**: tenant_id, smtp_host, smtp_port, smtp_user, from_email
- **Usage**: Custom email delivery per tenant

#### 10. **Item** (Business Entities)
```python
# Location: app/models.py - Item class
```
- **Purpose**: Core business entities (example/template)
- **Key Fields**: title, description, owner_id
- **Scope**: Per-user ownership

## Key Relationships Map

### Tenant-Centric Relationships
```
Tenant (1) → Users (Many)
Tenant (1) → TenantApiKey (Many)
Tenant (1) → CreditTransaction (Many)
Tenant (1) → EmailConfig (One)
Tenant (1) → TenantInvitation (Many)
```

### User-Centric Relationships
```
User (1) → UserSubscription (Many)
User (1) → Items (Many)
User (1) → CreditTransaction (Many) [as user_id]
User (1) → TenantInvitation (Many) [as created_by]
```

### Subscription Relationships
```
SubscriptionPlan (1) → UserSubscription (Many)
User (1) → UserSubscription (Many)
```

## Critical Business Rules

### Data Isolation Rules
1. **Users can only access data within their tenant** (except SuperAdmin)
2. **API keys are tenant-specific** and encrypted
3. **Credit transactions are tenant-scoped**
4. **Invitations are tenant-specific**

### Role-Based Access Rules
1. **SuperAdmin**: Global access to all tenants and data
2. **TenantAdmin**: Full access within their tenant only
3. **User**: Limited access within their tenant

### Credit System Rules
1. **Credits are allocated per user** based on subscription plan
2. **API usage deducts from user's credit balance**
3. **All credit movements are logged** in CreditTransaction
4. **Negative balances prevent API usage**

### API Key Security Rules
1. **Keys are encrypted** before database storage
2. **Frontend never receives actual keys**
3. **SuperAdmin manages global key pool**
4. **Tenants get assigned keys automatically**

## Database Constraints

### Foreign Key Relationships
- User.tenant_id → Tenant.id
- UserSubscription.user_id → User.id
- UserSubscription.plan_id → SubscriptionPlan.id
- TenantApiKey.tenant_id → Tenant.id
- CreditTransaction.tenant_id → Tenant.id
- CreditTransaction.user_id → User.id
- Item.owner_id → User.id
- TenantInvitation.tenant_id → Tenant.id
- EmailConfig.tenant_id → Tenant.id

### Unique Constraints
- User.email (globally unique)
- TenantApiKey (one active key per provider per tenant)
- AdminApiKey (one active key per provider globally)

## Model Location Reference

All models are defined in: **`backend/app/models.py`**

### Response Models (API)
- `UserPublic`, `TenantPublic`, `SubscriptionPlanPublic`
- `CreditTransactionPublic`, `TenantApiKeyPublic`
- `UserSubscriptionPublic`, `TenantInvitationPublic`

### Create/Update Models
- `UserCreate`, `UserUpdate`, `TenantCreate`, `TenantUpdate`
- `SubscriptionPlanCreate`, `SubscriptionPlanUpdate`
- `CreditTransactionCreate`, `TenantInvitationCreate`

### Utility Models
- `Message`, `Token`, `TokenPayload`
- `UpdatePassword`, `NewPassword`