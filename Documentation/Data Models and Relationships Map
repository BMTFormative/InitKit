# Database Models and Business Logic Map

## 🎯 Core Database Entities

### 👥 User Management Models

#### **User** (Platform Users)
- **Purpose**: All platform users across all tenants
- **Key Fields**: email, tenant_id, role, is_active, is_superuser
- **Roles**: "superadmin", "tenant_admin", "user"
- **Business Rule**: Email globally unique, tenant_id isolates data

#### **Tenant** (Organizations)
- **Purpose**: Client organizations/companies
- **Key Fields**: name, description, is_active, created_at
- **Business Rule**: Each tenant has isolated workspace

#### **TenantInvitation** (User Onboarding)
- **Purpose**: Secure user invitation system
- **Key Fields**: tenant_id, email, role, token, expires_at, is_used
- **Business Rule**: JWT tokens with expiration, one-time use

### 💳 Billing & Subscription Models

#### **SubscriptionPlan** (Service Tiers)
- **Purpose**: Define subscription offerings
- **Key Fields**: name, price, duration_days, features[], credit_limit
- **Business Rule**: Features as JSON array, credit_limit per user

#### **UserSubscription** (Active Subscriptions)
- **Purpose**: Track user's current subscription
- **Key Fields**: user_id, plan_id, start_date, end_date, status
- **Business Rule**: Status in ["active", "cancelled", "expired"]

#### **CreditTransaction** (Usage Ledger)
- **Purpose**: Track all credit movements
- **Key Fields**: tenant_id, user_id, amount, transaction_type, description
- **Business Rule**: Positive for additions, negative for deductions

### 🔑 Security & API Models

#### **TenantApiKey** (Per-Tenant Keys)
- **Purpose**: Encrypted API keys assigned to tenants
- **Key Fields**: tenant_id, provider, encrypted_key, is_active
- **Business Rule**: Keys encrypted, never exposed to frontend

#### **AdminApiKey** (Global Key Pool)
- **Purpose**: SuperAdmin manages platform-wide keys
- **Key Fields**: provider, encrypted_key, is_active
- **Business Rule**: SuperAdmin assigns keys to tenants

### ⚙️ Configuration Models

#### **EmailConfig** (Per-Tenant Email)
- **Purpose**: Custom SMTP settings per tenant
- **Key Fields**: tenant_id, smtp_host, smtp_port, smtp_user, from_email
- **Business Rule**: Each tenant can have custom email branding

#### **Item** (Business Example)
- **Purpose**: Sample business entity (template)
- **Key Fields**: title, description, owner_id
- **Business Rule**: User-owned, tenant-scoped access

## 🔗 Critical Relationships

### Multi-Tenant Data Isolation
```
Tenant (1) ──→ Users (Many)
Tenant (1) ──→ TenantApiKey (Many)
Tenant (1) ──→ CreditTransaction (Many)
Tenant (1) ──→ TenantInvitation (Many)
Tenant (1) ──→ EmailConfig (One)
```

### User-Centric Relationships
```
User (1) ──→ UserSubscription (Many)
User (1) ──→ Items (Many)
User (1) ──→ CreditTransaction (Many) [as consumer]
```

### Billing Relationships
```
SubscriptionPlan (1) ──→ UserSubscription (Many)
User (1) ──→ UserSubscription (Many)
UserSubscription ──→ Auto Credit Allocation
```

## 🎯 Business Rules & Constraints

### Data Isolation Rules
1. **Tenant Isolation**: All data scoped by tenant_id (except SuperAdmin)
2. **User Access**: Users can only access their tenant's data
3. **API Keys**: Encrypted and tenant-specific
4. **Credits**: Tracked per tenant and user

### Security Rules
1. **Email Uniqueness**: Globally unique across all tenants
2. **API Key Encryption**: Keys encrypted before database storage
3. **Role Enforcement**: JWT tokens contain tenant_id and role
4. **Invitation Security**: JWT tokens with expiration and one-time use

### Credit System Rules
1. **Credit Allocation**: Based on subscription plan limits
2. **Usage Tracking**: All movements logged in CreditTransaction
3. **Balance Calculation**: Real-time from transaction history
4. **Negative Prevention**: API calls blocked when credits insufficient

### Subscription Rules
1. **Plan Features**: JSON array defines available capabilities
2. **User Limits**: Credit allocation per user based on plan
3. **Status Management**: Active subscriptions enable features
4. **Automatic Billing**: Credits allocated on subscription start

## 📊 Database Constraints

### Primary Relationships
- User.tenant_id → Tenant.id
- UserSubscription.user_id → User.id
- UserSubscription.plan_id → SubscriptionPlan.id
- TenantApiKey.tenant_id → Tenant.id
- CreditTransaction.tenant_id → Tenant.id
- TenantInvitation.tenant_id → Tenant.id
- EmailConfig.tenant_id → Tenant.id
- Item.owner_id → User.id

### Unique Constraints
- User.email (platform-wide unique)
- TenantApiKey.tenant_id + provider (one key per provider per tenant)
- AdminApiKey.provider (one global key per provider)
- EmailConfig.tenant_id (one config per tenant)

## 🏗️ File Locations

### Backend Models
- **All Models**: `backend/app/models.py`
- **Database Operations**: `backend/app/crud.py`
- **Migrations**: `backend/app/alembic/versions/`

### Frontend Types
- **Generated Types**: `frontend/src/client/types.gen.ts`
- **Extended Types**: `frontend/src/types/tenant.ts`
- **API Client**: `frontend/src/client/sdk.gen.ts`

## 🔄 Common Model Operations

### Adding New Model
1. **Define in models.py** with relationships
2. **Generate migration** with Alembic
3. **Add CRUD operations** in crud.py
4. **Update API routes** for new endpoints
5. **Generate frontend types** from OpenAPI

### Modifying Existing Model
1. **Update model definition** in models.py
2. **Create migration** for schema changes
3. **Update related CRUD** operations
4. **Test migration** with existing data
5. **Update frontend types** if needed

### Adding Relationships
1. **Define foreign keys** in models
2. **Add relationship properties** (back_populates)
3. **Update database constraints**
4. **Test relationship queries**
5. **Update API responses** to include related data

## 💡 Model Design Patterns

### Multi-Tenant Pattern
- **Shared Schema**: All tenants use same tables
- **Tenant ID**: Every tenant-scoped model has tenant_id
- **Access Control**: API layer enforces tenant isolation
- **SuperAdmin Exception**: Can access cross-tenant data

### Credit System Pattern
- **Ledger Approach**: All movements tracked as transactions
- **Balance Calculation**: Sum transactions for current balance
- **Audit Trail**: Complete history of credit usage
- **Real-time Updates**: Balance checked before API usage

### Security Pattern
- **Encryption at Rest**: API keys encrypted in database
- **JWT Claims**: Tokens include tenant_id and role
- **Role-based Access**: Different permissions per role
- **Invitation Tokens**: Secure user onboarding with expiring tokens