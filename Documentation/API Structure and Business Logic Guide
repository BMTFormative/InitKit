# API Structure and Business Flow Guide

## 🌐 Backend API Organization

### 📍 API Endpoint Structure
**Base Path**: `/api/v1`

### 🔐 Authentication System
**File**: `backend/app/api/routes/login.py`
- **Login Flow**: Email/password → JWT token with tenant_id + role
- **Password Recovery**: Email-based reset with secure tokens
- **Invitation Acceptance**: JWT validation → User creation + tenant assignment
- **Token Validation**: Verify JWT and return user info

### 👤 User Management System
**File**: `backend/app/api/routes/users.py`
- **User CRUD**: Create, read, update, delete users
- **Profile Management**: Update personal information
- **Password Management**: Secure password changes
- **Credit Balance**: Real-time credit tracking per user
- **Self-Service**: Account deletion and profile updates

### 🏢 Tenant Management System
**File**: `backend/app/api/routes/tenants.py`
- **Tenant CRUD**: Organization management (SuperAdmin only)
- **Tenant Discovery**: List and search tenants
- **Tenant Analytics**: Credit balance and usage statistics

### 👥 Tenant User Management
**File**: `backend/app/api/routes/tenant_users.py`
- **User Invitation**: Create secure invitation tokens
- **Invitation Management**: List, delete pending invitations
- **User Status**: Enable/disable tenant users
- **Role Management**: Assign and modify user roles within tenant

### 🔑 API Key Management
**Files**: Multiple key management endpoints

#### Tenant API Keys
**File**: `backend/app/api/routes/tenant_api_keys.py`
- **Key Assignment**: Assign encrypted keys to tenants
- **Key Status**: Enable/disable keys per tenant
- **Key Rotation**: Update keys without service interruption

#### Admin API Keys
**File**: `backend/app/api/routes/admin_api_keys.py`
- **Global Key Pool**: SuperAdmin manages platform keys
- **Key Distribution**: Assign keys from pool to tenants
- **Key Monitoring**: Track usage across all tenants

### 💳 Subscription & Billing
**File**: `backend/app/api/routes/subscriptions.py`
- **Plan Management**: Create, update subscription plans
- **User Subscriptions**: Subscribe users to plans
- **Subscription Status**: Track active, cancelled, expired subscriptions
- **Feature Access**: Plan-based feature enablement

### 💰 Credit Management
**File**: `backend/app/api/routes/tenant_credits.py`
- **Credit Allocation**: Add credits to tenant/user accounts
- **Transaction History**: Complete audit trail of credit usage
- **Balance Tracking**: Real-time credit balance calculation
- **Usage Analytics**: Credit consumption patterns

### 🤖 AI API Proxy
**File**: `backend/app/api/routes/ai_proxy.py`
- **OpenAI Proxy**: Secure proxy to OpenAI API
- **Cost Calculation**: Real-time credit deduction
- **Usage Tracking**: Log all API calls and costs
- **Balance Enforcement**: Block calls when credits insufficient

### 📧 Email Configuration
**File**: `backend/app/api/routes/tenant_email_config.py`
- **SMTP Setup**: Per-tenant email configuration
- **Email Testing**: Validate SMTP settings
- **Template Management**: Custom email branding per tenant

### 🏗️ Business Entity Management
**File**: `backend/app/api/routes/items.py`
- **Entity CRUD**: Example business entity management
- **Tenant Isolation**: Data scoped to user's tenant
- **Access Control**: Role-based entity access

## ⚙️ Service Layer Architecture

### 🔧 Core Business Services
**Location**: `backend/app/services/`

#### API Key Service
**File**: `backend/app/services/api_key_service.py`
- **Encryption/Decryption**: Secure key storage and retrieval
- **Key Lifecycle**: Creation, assignment, rotation, deletion
- **Tenant Assignment**: Automatic key allocation to new tenants
- **Pool Management**: Global key pool for SuperAdmin

#### Credit Service
**File**: `backend/app/services/credit_service.py`
- **Balance Calculation**: Real-time credit balance from transactions
- **Credit Operations**: Add, deduct, refund credit transactions
- **Usage Tracking**: Monitor credit consumption patterns
- **Plan Integration**: Automatic credit allocation based on subscriptions

#### Invitation Service
**File**: `backend/app/services/invitation_service.py`
- **Token Generation**: Secure JWT tokens for invitations
- **Email Delivery**: Send invitation emails with secure links
- **User Creation**: Validate tokens and create new users
- **Tenant Assignment**: Automatic role and tenant assignment

#### AI Proxy Service
**File**: `backend/app/services/ai_api_service.py`
- **Request Proxying**: Secure proxy to external AI APIs
- **Cost Estimation**: Calculate credit cost before API calls
- **Usage Deduction**: Automatic credit deduction during API usage
- **Error Handling**: Refund credits on failed API calls

## 🔒 Authentication & Authorization

### JWT Token Structure
**Components**: User ID, Tenant ID, Role, Expiration
**Usage**: Every API request validates token and extracts claims
**Security**: Tokens signed with secret key, expiration enforced

### Role-Based Access Control
**File**: `backend/app/api/deps.py`

#### Permission Levels
1. **SuperAdmin**: Platform-wide access, all tenants, all operations
2. **TenantAdmin**: Full access within their tenant only
3. **User**: Limited access within their tenant

#### Access Dependencies
- **Authentication**: Validate JWT token
- **Authorization**: Check role permissions
- **Tenant Isolation**: Enforce tenant data access
- **Feature Access**: Subscription-based feature enablement

## 🔄 Critical Business Flows

### User Invitation & Onboarding
```
1. TenantAdmin creates invitation
   ↓ InvitationService.create_invitation()
2. System generates JWT token + sends email
   ↓ Email with secure invitation link
3. User clicks link → Frontend invitation page
   ↓ User completes registration form
4. Frontend calls /login/accept-invitation
   ↓ InvitationService.accept_invitation()
5. User created + tenant assignment + credit allocation
```

### AI API Usage & Billing
```
1. User makes API request
   ↓ Authentication + permission validation
2. Get tenant's API key + check credit balance
   ↓ AiApiService.proxy_openai_request()
3. Estimate cost + pre-deduct credits
   ↓ Proxy request to OpenAI API
4. Calculate actual cost + adjust credit deduction
   ↓ Log transaction + return response
5. Real-time balance update in frontend
```

### Subscription & Credit Allocation
```
1. User subscribes to plan
   ↓ SubscriptionService.create_subscription()
2. Calculate credit allocation based on plan
   ↓ CreditService.allocate_plan_credits()
3. Create credit transaction records
   ↓ Update user's available credit balance
4. Enable plan features for user
```

### Tenant Onboarding
```
1. New user registration
   ↓ User creates account + organization
2. Auto-create tenant entity
   ↓ User becomes TenantAdmin of new tenant
3. Assign API key from global pool
   ↓ ApiKeyService.consume_admin_key()
4. Ready to invite users + use platform
```

## 🎨 Frontend Service Integration

### API Service Organization
**Location**: `frontend/src/services/`

#### Service Mapping
- **TenantService**: Tenant CRUD operations
- **TenantUserService**: User management within tenants
- **ApiKeyService**: API key management
- **CreditService**: Credit transactions and balance
- **InvitationService**: User invitation flow
- **EmailConfigService**: Email configuration
- **GlobalApiKeyService**: SuperAdmin key management

#### Integration Patterns
- **TanStack Query**: Server state management and caching
- **Error Handling**: Centralized error processing
- **Loading States**: UI feedback during API calls
- **Optimistic Updates**: Immediate UI updates with rollback

## 🔧 Configuration & Setup

### Core Configuration
**File**: `backend/app/core/config.py`
- **Database Settings**: PostgreSQL connection configuration
- **JWT Configuration**: Secret keys and token expiration
- **Email Settings**: SMTP configuration for notifications
- **External APIs**: OpenAI and other service configurations

### Database Management
**File**: `backend/app/core/db.py`
- **Connection Management**: Database engine and session handling
- **Initial Data**: Seed data for SuperAdmin and default plans
- **Migration Support**: Alembic integration for schema changes

### Security Configuration
**File**: `backend/app/core/security.py`
- **Password Hashing**: Secure password storage
- **JWT Management**: Token creation and validation
- **Access Control**: Role-based permission enforcement

## 📊 API Documentation & Testing

### OpenAPI Integration
- **Automatic Documentation**: FastAPI generates OpenAPI specs
- **Interactive Testing**: Swagger UI for API exploration
- **Type Safety**: Pydantic models ensure request/response validation

### Testing Strategy
- **Endpoint Testing**: Comprehensive API endpoint coverage
- **Authentication Testing**: Role-based access verification
- **Business Logic Testing**: Service layer unit tests
- **Integration Testing**: Full workflow testing

## 🚀 Scalability Considerations

### Current Architecture Benefits
- **Stateless Design**: Easy horizontal scaling
- **Service Separation**: Independent scaling of components
- **Caching Strategy**: TanStack Query reduces API load
- **Efficient Queries**: Optimized database operations

### Future Enhancement Ready
- **Additional AI Providers**: Modular proxy service design
- **Custom Billing**: Flexible credit and subscription system
- **Advanced Analytics**: Comprehensive usage tracking
- **Multi-Region**: Tenant-based geographic distribution