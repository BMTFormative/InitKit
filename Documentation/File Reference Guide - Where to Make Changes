# Complete File Reference Guide - Frontend & Backend

## 🎯 Quick Reference Structure

### 📁 Project Structure Overview
```
project/
├── backend/                     # FastAPI Backend
│   ├── app/                     # Main application
│   ├── scripts/                 # Deployment scripts
│   └── tests/                   # Test suite
├── frontend/                    # React Frontend
│   ├── src/                     # Source code
│   └── public/                  # Static assets
└── Documentation/               # Project docs
```

## 🖥️ BACKEND FILE ORGANIZATION

### 📊 Core Application Files
```
backend/app/
├── models.py                    # All database models and relationships
├── crud.py                      # Database operations
├── main.py                      # FastAPI app setup and configuration
├── utils.py                     # Utility functions (email, tokens)
├── api/                         # API routes organization
├── core/                        # Core configuration
├── services/                    # Business logic services
└── alembic/                     # Database migrations
```

### 🔐 Authentication & Security
```
backend/app/core/
├── security.py                  # JWT creation, password hashing
├── config.py                    # Environment configuration
└── db.py                        # Database initialization

backend/app/api/
└── deps.py                      # Auth dependencies, role validation
```

### 🌐 API Routes Organization
```
backend/app/api/routes/
├── login.py                     # Authentication endpoints
├── users.py                     # User management
├── tenants.py                   # Tenant CRUD operations
├── tenant_users.py              # Tenant user management
├── tenant_api_keys.py           # Tenant API key management
├── tenant_credits.py            # Credit management
├── tenant_email_config.py       # Email configuration
├── subscriptions.py             # Subscription management
├── admin_api_keys.py            # Global API key management
├── ai_proxy.py                  # AI API proxy
├── items.py                     # Business entities
└── utils.py                     # Utility endpoints
```

### 🔧 Business Logic Services
```
backend/app/services/
├── api_key_service.py           # API key encryption/management
├── credit_service.py            # Credit operations
├── invitation_service.py        # User invitation flow
└── ai_api_service.py            # AI API proxy logic
```

### 📧 Email System
```
backend/app/email-templates/
├── src/                         # MJML source templates
│   └── invitation.mjml          # Invitation email template
└── build/                       # Compiled HTML templates
    └── invitation.html          # Generated HTML
```

### 🧪 Testing Structure
```
backend/app/tests/
├── conftest.py                  # Test configuration
├── api/routes/                  # API endpoint tests
├── crud/                        # Database operation tests
└── utils/                       # Test utilities
```

## 🎨 FRONTEND FILE ORGANIZATION

### 📱 Core Application Structure
```
frontend/src/
├── main.tsx                     # App entry point
├── routeTree.gen.ts            # Generated routes
├── theme.tsx                   # Chakra UI theme
├── utils.ts                    # Utility functions
├── hooks/                      # Custom React hooks
├── types/                      # TypeScript type definitions
├── services/                   # API service calls
├── components/                 # Reusable components
└── routes/                     # Page components
```

### 🔐 Authentication & Hooks
```
frontend/src/hooks/
├── useAuth.ts                  # Authentication hook with tenant support
└── useCustomToast.ts          # Toast notification hook
```

### 🌐 API Services
```
frontend/src/services/
├── tenant-service.ts           # Tenant management API calls
├── tenant-user-service.ts      # Tenant user management
├── api-key-service.ts          # API key management
├── credit-service.ts           # Credit transactions
├── invitation-service.ts       # User invitation API
├── email-config-service.ts     # Email configuration
├── global-api-key-service.ts   # Global API key management
└── admin-tenant-api-key-service.ts # Cross-tenant API key view
```

### 🧩 Component Organization
```
frontend/src/components/
├── ui/                         # Chakra UI wrapper components
│   ├── button.tsx             # Custom button component
│   ├── dialog.tsx             # Modal dialogs
│   ├── field.tsx              # Form field wrapper
│   ├── checkbox.tsx           # Checkbox component
│   ├── pagination.tsx         # Pagination component
│   └── ...                    # Other UI components
├── Common/                     # Shared components
│   ├── Navbar.tsx             # Top navigation
│   ├── Sidebar.tsx            # Side navigation
│   ├── SidebarItems.tsx       # Navigation items
│   ├── UserMenu.tsx           # User dropdown menu
│   ├── NotFound.tsx           # 404 page
│   └── GlobalInvitationModal.tsx # Global invitation modal
├── Admin/                      # Admin-specific components
│   ├── AddUser.tsx            # User creation form
│   ├── EditUser.tsx           # User editing form
│   ├── DeleteUser.tsx         # User deletion confirmation
│   ├── TenantsManagement.tsx   # Tenant management dashboard
│   ├── TenantUserManagement.tsx # Tenant user management
│   ├── TenantApiKeyManagement.tsx # API key management
│   ├── GlobalApiKeyManagement.tsx # Global API keys
│   ├── CreditTransactions.tsx  # Credit management
│   ├── SubscriptionPlanManagement.tsx # Plan management
│   ├── EmailConfiguration.tsx  # Email settings
│   └── InvitationForm.tsx     # User invitation form
├── Items/                      # Business entity components
│   ├── AddItem.tsx            # Item creation
│   ├── EditItem.tsx           # Item editing
│   └── DeleteItem.tsx         # Item deletion
├── UserSettings/               # User settings components
│   ├── UserInformation.tsx     # Profile management
│   ├── ChangePassword.tsx      # Password change
│   ├── Appearance.tsx          # Theme settings
│   ├── DeleteAccount.tsx       # Account deletion
│   └── DeleteConfirmation.tsx  # Deletion confirmation
├── Subscriptions/              # Subscription components
│   ├── SubscriptionPlans.tsx   # Available plans
│   └── CurrentSubscription.tsx # Current subscription status
└── Pending/                    # Loading state components
    ├── PendingItems.tsx       # Loading items
    └── PendingUsers.tsx       # Loading users
```

### 🛣️ Route Organization
```
frontend/src/routes/
├── __root.tsx                  # Root layout
├── _layout.tsx                 # Authenticated layout
├── login.tsx                   # Login page
├── signup.tsx                  # Registration page
├── recover-password.tsx        # Password recovery
├── reset-password.tsx          # Password reset
├── accept-invitation.tsx       # Invitation acceptance
└── _layout/                    # Protected routes
    ├── index.tsx              # Dashboard
    ├── admin.tsx              # Admin dashboard
    ├── items.tsx              # Items management
    ├── settings.tsx           # User settings
    ├── subscriptions.tsx      # Subscription management
    └── tenant-users.tsx       # Tenant user management
```

### 🎨 Type Definitions
```
frontend/src/types/
└── tenant.ts                  # Extended types for multi-tenant features
```

### 🌐 Generated API Client
```
frontend/src/client/
├── index.ts                   # Main client exports
├── sdk.gen.ts                 # Generated API methods
├── types.gen.ts               # Generated TypeScript types
├── schemas.gen.ts             # API schemas
└── core/                      # Client core functionality
    ├── ApiError.ts            # Error handling
    ├── OpenAPI.ts             # API configuration
    └── request.ts             # HTTP request logic
```

## 🔧 Configuration Files

### Backend Configuration
```
backend/
├── .env                       # Environment variables
├── pyproject.toml            # Python dependencies
├── Dockerfile                # Container configuration
├── docker-compose.yml        # Development setup
└── app/alembic/
    ├── alembic.ini           # Migration configuration
    └── env.py                # Migration environment
```

### Frontend Configuration
```
frontend/
├── .env.development          # Development environment
├── package.json              # Node dependencies
├── vite.config.ts           # Vite configuration
├── tsconfig.json            # TypeScript configuration
└── index.html               # HTML template
```

## 📋 Common Update Scenarios

### Adding New Database Model
**Backend Files:**
1. `backend/app/models.py` - Add model class
2. `alembic revision --autogenerate` - Create migration
3. `backend/app/crud.py` - Add CRUD operations

### Adding New API Endpoint
**Backend Files:**
1. `backend/app/api/routes/[module].py` - Add route
2. `backend/app/api/main.py` - Register router
3. `backend/app/models.py` - Add request/response models

**Frontend Files:**
1. `frontend/src/services/[module]-service.ts` - Add API call
2. `frontend/src/types/[module].ts` - Add TypeScript types

### Adding New Page/Component
**Frontend Files:**
1. `frontend/src/routes/[page].tsx` - Create page component
2. `frontend/src/components/[Module]/[Component].tsx` - Create component
3. Update navigation in `frontend/src/components/Common/SidebarItems.tsx`

### Adding New User Role
**Backend Files:**
1. `backend/app/models.py` - Update TokenPayload
2. `backend/app/api/deps.py` - Add role dependencies

**Frontend Files:**
1. `frontend/src/types/tenant.ts` - Update user types
2. `frontend/src/hooks/useAuth.ts` - Update auth hook
3. Update role checks in components

### Email Template Updates
**Backend Files:**
1. `backend/app/email-templates/src/*.mjml` - Edit source
2. Compile to HTML in `backend/app/email-templates/build/`
3. `backend/app/utils.py` - Update email logic

## 💡 Development Workflow

### Backend Development
1. **Models** → `backend/app/models.py`
2. **Migrations** → `alembic revision --autogenerate`
3. **API Routes** → `backend/app/api/routes/`
4. **Services** → `backend/app/services/`
5. **Tests** → `backend/app/tests/`

### Frontend Development
1. **Types** → `frontend/src/types/`
2. **Services** → `frontend/src/services/`
3. **Components** → `frontend/src/components/`
4. **Routes** → `frontend/src/routes/`
5. **Hooks** → `frontend/src/hooks/`

### Testing Strategy
- **Backend**: API endpoint tests, CRUD tests, service tests
- **Frontend**: Component tests, integration tests, E2E tests
- **Database**: Migration tests, constraint tests